@page "/Artistas"
@inject ArtistaAPI artistaAPI

@* Componente Mud para mostrar o botao de paginas *@
<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>



@if(artistasDaPagina is not null)
{
    //Faz um for que passa no artistas 
    // e bota eles em um CardArtista
    <MudGrid>
        @foreach (var artista in artistasDaPagina)
        {
            <MudItem xs="3">
                <CardArtistas Artista="artista" />
            </MudItem>
        }
    </MudGrid>

}
else // Adicionando aqui
{
    <p>Carregando...</p>
}

@code {
    private ICollection<ArtistaResponse>? artistas;

    //COdigo para dividir em paginas:
    private int tamanho = 4;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasDaPagina;




    protected override async Task OnInitializedAsync()
    {
        try
        {
            artistas = await artistaAPI.GetArtistasAsync();

            if (artistas is not null)
            {
                artistas.OrderByDescending(a => a.Id).ToList();
                totalItens = artistas.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling(totalItens * 1.0)/tamanho);
                this.PaginaMudou(1);

            }

        }
        catch (Exception ex)
        {
            // Log the exception (use a logging framework or simply output to console for now)
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private void PaginaMudou(int NumeroDaPag)
    {
        var indicie = NumeroDaPag - 1;
        artistasDaPagina = artistas!
            .Skip(tamanho * indicie)
            .Take(tamanho)
            .ToList();
    }



}
